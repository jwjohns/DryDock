name: Drydock Multi-Cloud Deploy

on:
  push:
    branches:
      - main # Or your default branch
  workflow_dispatch:
    inputs:
      cloud:
        description: 'Target cloud provider'
        required: true
        default: 'gcp'
        type: choice
        options:
          - gcp
          - azure
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: string
      # Add other inputs if needed, e.g., specific version tag

permissions:
  contents: read
  id-token: write # Required for BOTH GCP and Azure WIF

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Set environment variables for easy access in steps
    env:
      CLOUD_TARGET: ${{ github.event.inputs.cloud || 'gcp' }} # Default to gcp if not manually triggered
      ENV_TARGET: ${{ github.event.inputs.environment || 'dev' }} # Default to dev if not manually triggered

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # === GCP Authentication (Conditional) ===
      - name: Authenticate to Google Cloud via WIF
        if: env.CLOUD_TARGET == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}' # Replace with your GCP WIF provider
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}' # Replace with your GCP SA email

      # === Azure Authentication (Conditional) ===
      - name: Login to Azure via WIF
        if: env.CLOUD_TARGET == 'azure'
        uses: azure/login@v1
        with:
          client-id: '${{ secrets.AZURE_CLIENT_ID }}' # Replace with Azure AD App Registration Client ID enabled for WIF
          tenant-id: '${{ secrets.AZURE_TENANT_ID }}' # Replace with Azure AD Tenant ID
          subscription-id: '${{ secrets.AZURE_SUBSCRIPTION_ID }}' # Replace with Azure Subscription ID
          enable-AzPSSession: false # Set to true if you need PowerShell Az module

      # --- Cargo Pulling Steps ---
      # Setup required SDKs based on cloud
      - name: Setup Google Cloud SDK
        if: env.CLOUD_TARGET == 'gcp'
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Azure CLI
        if: env.CLOUD_TARGET == 'azure'
        uses: azure/setup-azure-cli@v1

      # Determine Cargo File Paths
      - name: Set Cargo File Paths
        id: set_paths
        run: |
          if [ "${{ env.CLOUD_TARGET }}" == "azure" ]; then
            echo "tf_cargo_src=terraform/cargo/azure-${{ env.ENV_TARGET }}.tfvars.example" >> $GITHUB_OUTPUT
            echo "helm_cargo_src=helm/cargo/azure-${{ env.ENV_TARGET }}.override.yaml.example" >> $GITHUB_OUTPUT
            echo "tf_hull_dir=terraform/hull-azure" >> $GITHUB_OUTPUT
          else # Default to gcp
            echo "tf_cargo_src=terraform/cargo/${{ env.ENV_TARGET }}.tfvars.example" >> $GITHUB_OUTPUT
            echo "helm_cargo_src=helm/cargo/${{ env.ENV_TARGET }}.overrides.yaml.example" >> $GITHUB_OUTPUT
            echo "tf_hull_dir=terraform/hull-gcp" >> $GITHUB_OUTPUT
          fi
          echo "tf_cargo_dest=terraform/cargo/environment.auto.tfvars" >> $GITHUB_OUTPUT
          echo "helm_cargo_dest=helm/cargo/environment-overrides.yaml" >> $GITHUB_OUTPUT

      # Pull Cargo (Examples - REPLACE WITH ACTUAL LOGIC)
      - name: Pull Terraform Cargo
        run: |
          echo "Pulling Terraform cargo for ${{ env.CLOUD_TARGET }}/${{ env.ENV_TARGET }} into ${{ steps.set_paths.outputs.tf_cargo_dest }}"

          if [ "${{ env.CLOUD_TARGET }}" == "gcp" ]; then
            echo "Source: gs://${{ secrets.GCP_CARGO_BUCKET }}/terraform/${{ env.ENV_TARGET }}.tfvars"
            gsutil cp "gs://${{ secrets.GCP_CARGO_BUCKET }}/terraform/${{ env.ENV_TARGET }}.tfvars" "${{ steps.set_paths.outputs.tf_cargo_dest }}"
          elif [ "${{ env.CLOUD_TARGET }}" == "azure" ]; then
            echo "Source Blob: terraform/azure-${{ env.ENV_TARGET }}.tfvars"
            az storage blob download --account-name "${{ secrets.AZURE_CARGO_STORAGE_ACCOUNT }}" --container-name "${{ secrets.AZURE_CARGO_CONTAINER }}" --name "terraform/azure-${{ env.ENV_TARGET }}.tfvars" --file "${{ steps.set_paths.outputs.tf_cargo_dest }}" --auth-mode login --overwrite
          else
            echo "Error: Unknown CLOUD_TARGET '${{ env.CLOUD_TARGET }}' for pulling Terraform cargo."
            exit 1
          fi

          echo "TF Vars Contents (first 10 lines):"
          head -n 10 "${{ steps.set_paths.outputs.tf_cargo_dest }}" || true # Use || true to prevent failure if file is empty or very short

      - name: Pull Helm Overrides
        run: |
          echo "Pulling Helm overrides for ${{ env.CLOUD_TARGET }}/${{ env.ENV_TARGET }} into ${{ steps.set_paths.outputs.helm_cargo_dest }}"

          if [ "${{ env.CLOUD_TARGET }}" == "gcp" ]; then
            echo "Source: gs://${{ secrets.GCP_CARGO_BUCKET }}/helm/${{ env.ENV_TARGET }}.override.yaml"
            gsutil cp "gs://${{ secrets.GCP_CARGO_BUCKET }}/helm/${{ env.ENV_TARGET }}.override.yaml" "${{ steps.set_paths.outputs.helm_cargo_dest }}"
          elif [ "${{ env.CLOUD_TARGET }}" == "azure" ]; then
            echo "Source Blob: helm/azure-${{ env.ENV_TARGET }}.override.yaml"
            az storage blob download --account-name "${{ secrets.AZURE_CARGO_STORAGE_ACCOUNT }}" --container-name "${{ secrets.AZURE_CARGO_CONTAINER }}" --name "helm/azure-${{ env.ENV_TARGET }}.override.yaml" --file "${{ steps.set_paths.outputs.helm_cargo_dest }}" --auth-mode login --overwrite
          else
            echo "Error: Unknown CLOUD_TARGET '${{ env.CLOUD_TARGET }}' for pulling Helm overrides."
            exit 1
          fi

          echo "Helm Overrides Contents (first 10 lines):"
          head -n 10 "${{ steps.set_paths.outputs.helm_cargo_dest }}" || true # Use || true to prevent failure if file is empty or very short

      - name: Helm Lint
        run: |
          helm lint ./helm/charts/example \
            -f ./helm/hull/values.yaml \
            -f ${{ steps.set_paths.outputs.helm_cargo_dest }} \
            -f helm/cargo/secrets.yaml

      - name: Pull Secrets
        run: |
          # Initialize empty secret files or ensure directory exists
          mkdir -p terraform/cargo helm/cargo
          touch terraform/cargo/secrets.auto.tfvars
          touch helm/cargo/secrets.yaml
          echo "Initialized potential secret files."

          if [ "${{ env.CLOUD_TARGET }}" == "gcp" ]; then
            echo "Pulling secrets for GCP from Secret Manager..."
            
            # Pull Terraform secrets
            if gcloud secrets versions access latest --secret="tf-secrets.auto.tfvars" --project="${{ secrets.GCP_PROJECT_ID }}" > terraform/cargo/secrets.auto.tfvars; then
              echo "Successfully pulled tf-secrets.auto.tfvars from GCP Secret Manager."
              if [ ! -s terraform/cargo/secrets.auto.tfvars ]; then
                echo "Warning: tf-secrets.auto.tfvars was pulled but is empty."
              fi
            else
              echo "Warning: Failed to pull tf-secrets.auto.tfvars from GCP Secret Manager. Terraform will proceed without these secrets. Ensure the secret exists and permissions are correct if it's required."
              # Ensure the file is empty if pull failed, as gcloud might create an empty file on some errors before exiting.
              > terraform/cargo/secrets.auto.tfvars
            fi

            # Pull Helm secrets
            if gcloud secrets versions access latest --secret="helm-secrets.yaml" --project="${{ secrets.GCP_PROJECT_ID }}" > helm/cargo/secrets.yaml; then
              echo "Successfully pulled helm-secrets.yaml from GCP Secret Manager."
              if [ ! -s helm/cargo/secrets.yaml ]; then
                echo "Warning: helm-secrets.yaml was pulled but is empty."
              fi
            else
              echo "Warning: Failed to pull helm-secrets.yaml from GCP Secret Manager. Helm will proceed without these secrets. Ensure the secret exists and permissions are correct if it's required."
              # Ensure the file is empty if pull failed.
              > helm/cargo/secrets.yaml
            fi

          elif [ "${{ env.CLOUD_TARGET }}" == "azure" ]; then
            echo "Pulling secrets for Azure from Key Vault ${{ secrets.AZURE_KEY_VAULT_NAME }}..."

            # Pull Terraform secrets
            # Azure Key Vault secret name for 'tf-secrets.auto.tfvars' is 'tf-secrets-auto-tfvars'
            if az keyvault secret show --name "tf-secrets-auto-tfvars" --vault-name "${{ secrets.AZURE_KEY_VAULT_NAME }}" --query value -o tsv > terraform/cargo/secrets.auto.tfvars; then
              echo "Successfully pulled tf-secrets-auto-tfvars from Azure Key Vault."
              if [ ! -s terraform/cargo/secrets.auto.tfvars ]; then
                echo "Warning: tf-secrets-auto-tfvars was pulled but is empty."
              fi
            else
              echo "Warning: Failed to pull tf-secrets-auto-tfvars from Azure Key Vault. Terraform will proceed without these secrets. Ensure the secret exists and permissions are correct if it's required."
              # Ensure the file is empty if pull failed.
              > terraform/cargo/secrets.auto.tfvars
            fi

            # Pull Helm secrets
            # Azure Key Vault secret name for 'helm-secrets.yaml' is 'helm-secrets-yaml'
            if az keyvault secret show --name "helm-secrets-yaml" --vault-name "${{ secrets.AZURE_KEY_VAULT_NAME }}" --query value -o tsv > helm/cargo/secrets.yaml; then
              echo "Successfully pulled helm-secrets-yaml from Azure Key Vault."
              if [ ! -s helm/cargo/secrets.yaml ]; then
                echo "Warning: helm-secrets-yaml was pulled but is empty."
              fi
            else
              echo "Warning: Failed to pull helm-secrets-yaml from Azure Key Vault. Helm will proceed without these secrets. Ensure the secret exists and permissions are correct if it's required."
              # Ensure the file is empty if pull failed.
              > helm/cargo/secrets.yaml
            fi
          else
            echo "Warning: Unknown CLOUD_TARGET '${{ env.CLOUD_TARGET }}' for pulling secrets."
          fi

          echo "Secret pulling step complete."
          echo "Terraform secrets (first 5 lines):"
          head -n 5 terraform/cargo/secrets.auto.tfvars || true
          echo "Helm secrets (first 5 lines):"
          head -n 5 helm/cargo/secrets.yaml || true

      # --- Terraform Steps --- (Uses Hull Dir from set_paths step)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ steps.set_paths.outputs.tf_hull_dir }} init

      - name: Terraform Format Check
        run: terraform -chdir=${{ steps.set_paths.outputs.tf_hull_dir }} fmt --check

      - name: Terraform Validate
        run: |
          terraform -chdir=${{ steps.set_paths.outputs.tf_hull_dir }} validate \
            -var-file=../cargo/environment.auto.tfvars \
            -var-file=../cargo/secrets.auto.tfvars

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=${{ steps.set_paths.outputs.tf_hull_dir }} plan \
            -var-file=../cargo/environment.auto.tfvars \
            -var-file=../cargo/secrets.auto.tfvars \
            -out=tfplan

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=${{ steps.set_paths.outputs.tf_hull_dir }} apply -auto-approve tfplan

      # --- Helm Steps --- (May need cloud-specific context setup)
      - name: Setup Helm
        uses: azure/setup-helm@v4

      # Placeholder: Add step to configure kubectl context
      # This step WILL LIKELY need to be conditional based on CLOUD_TARGET
      - name: Get K8s Credentials
        run: |
          echo "Getting K8s credentials for ${{ env.CLOUD_TARGET }} environment ${{ env.ENV_TARGET }}"
          if [ "${{ env.CLOUD_TARGET }}" == "azure" ]; then
            az aks get-credentials --resource-group "${{ secrets.AZURE_AKS_RESOURCE_GROUP }}" --name "${{ secrets.AZURE_AKS_CLUSTER_NAME }}" --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --admin false --overwrite-existing
          elif [ "${{ env.CLOUD_TARGET }}" == "gcp" ]; then
            gcloud container clusters get-credentials "${{ secrets.GKE_CLUSTER_NAME }}" --region "${{ secrets.GCP_REGION }}" --project "${{ secrets.GCP_PROJECT_ID }}"
          else
            echo "Error: Unknown CLOUD_TARGET '${{ env.CLOUD_TARGET }}' for getting K8s credentials."
            exit 1
          fi
          echo "Kubeconfig setup complete for ${{ env.CLOUD_TARGET }}."

      - name: Helm Deploy/Upgrade
        run: |
          helm upgrade --install ${{ env.CLOUD_TARGET }}-${{ env.ENV_TARGET }}-release ./helm/charts/example \
            -f ./helm/hull/values.yaml \
            -f ${{ steps.set_paths.outputs.helm_cargo_dest }} \
            -f helm/cargo/secrets.yaml \
            --namespace my-namespace \
            --create-namespace
          # Adjust release name, namespace as needed

      - name: Cleanup Temporary Secret Files
        if: always()
        run: |
          rm -f terraform/cargo/secrets.auto.tfvars
          rm -f helm/cargo/secrets.yaml
          echo "Temporary secret files cleaned up."